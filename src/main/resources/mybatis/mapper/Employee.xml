<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.employee">

  <select id="idChk" parameterType="String" resultType="int">
    SELECT COUNT(*)
    FROM EMPLOYEE_TB
    WHERE EMP_ID = #{empId}
  </select>

  <select id="getSalt" parameterType="Employee" resultType="String">
    SELECT SALT
    FROM EMPLOYEE_TB
    WHERE EMP_ID = #{empId}
  </select>

  <select id="pmInCnt" resultType="int">
    SELECT COUNT(*)
    FROM EMPLOYEE_TB EMP
    --   PROJECT_MEMBER_TB PMT가용인력
    --  WHERE DATE_FORMAT(INP_DT, '%Y-%m') = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 0 MONTH), '%Y-%m')
  </select>

  <select id="pmInList" resultType="ProjectInOut">
    SELECT EMP.EMP_NM, PMB.INP_DT, PMB.OUT_DT, PRJ.PRJ_NM
    FROM EMPLOYEE_TB EMP
           LEFT JOIN perform_project_tb PMB ON PMB.EMP_IDX = EMP.EMP_IDX
           LEFT JOIN PROJECT_TB PRJ ON PRJ.PRJ_IDX = PMB.PRJ_IDX
    /* WHERE DATE_FORMAT(INP_DT, '%Y-%m') = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 0 MONTH), '%Y-%m')*/
  </select>

  <select id="pmOutCnt" resultType="int">
    SELECT COUNT(*)
    FROM perform_project_tb PMT
    WHERE DATE_FORMAT(OUT_DT, '%Y-%m') = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 0 MONTH), '%Y-%m')
  </select>

  <select id="pmOutList" resultType="ProjectInOut">
    SELECT EMP.EMP_NM, PMB.INP_DT, PMB.OUT_DT, PRJ.PRJ_NM
    FROM EMPLOYEE_TB EMP
           LEFT JOIN perform_project_tb PMB ON PMB.EMP_IDX = EMP.EMP_IDX
           LEFT JOIN PROJECT_TB PRJ ON PRJ.PRJ_IDX = PMB.PRJ_IDX
    WHERE DATE_FORMAT(PMB.OUT_DT, '%Y-%m') = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 0 MONTH), '%Y-%m')
  </select>

  <select id="jobCnt" resultType="int">
    SELECT (JOB.CNT / CT.JOB_RATE) * 100 AS RATE
    FROM CONFIG_TB CT,
         (SELECT COUNT(EMP.EMP_IDX) AS CNT
          FROM EMPLOYEE_TB EMP
          WHERE DATE_FORMAT(ENT_DT, '%Y-%m') = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 0 MONTH), '%Y-%m')
         ) AS JOB
  </select>

  <!--  <select id="jobCntList" resultType="int">
      SELECT EMP_NM, EMAIL, PH, ENT_DT
      FROM EMPLOYEE_TB EMP
      WHERE DATE_FORMAT(ENT_DT, '%Y-%m') = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 0 MONTH), '%Y-%m')
    </select>-->

  <select id="prjCnt" resultType="int">
    SELECT (JOB.CNT / CT.PRJ_RATE) * 100 AS RATE
    FROM CONFIG_TB CT,
         (SELECT COUNT(PMT.pmp_idx) AS CNT
          FROM perform_project_tb PMT
          WHERE DATE_FORMAT(INP_DT, '%Y-%m') = DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 0 MONTH), '%Y-%m')
         ) AS JOB
  </select>


  <select id="empAll" resultType="EmpList">
    /*소속, 부서, 휴대폰, 실경력(입사일) 학력(졸업일자) 기사여부 */
    SELECT ET.EMP_IDX,
           ET.EMP_NM,
           CT.COMP_NM,
           DT.DEPT_NM,
           ET.phone,
           ET.CNT_DT,
           TRUNCATE(TIMESTAMPDIFF(MONTH, ET.CNT_DT, CURDATE()) / 12, 0)     AS WORK_Y,
           TRUNCATE(MOD(TIMESTAMPDIFF(MONTH, ET.CNT_DT, CURDATE()), 12), 0) AS WORK_M,
           MAX(EBT.E_EDU_BCK_GUBUN)                                           AS EDU_BCK_GUBUN,
           MAX(EBT.e_edu_bck_grdtn_dt)                                       AS EDU_BCK_GRDTN_DAY,
           ET.GISA_YN
    FROM EMPLOYEE_TB ET
           LEFT JOIN COMPANY_TB CT ON ET.COMP_IDX = CT.COMP_IDX
           LEFT JOIN DEPARTMENT_TB DT ON ET.DEPT_IDX = DT.DEPT_IDX
           LEFT JOIN employee_education_background_tb EBT ON ET.EMP_IDX = EBT.EMP_IDX
    GROUP BY EMP_NM, EMP_IDX
    ORDER BY EMP_IDX DESC
  </select>

  <select id="deptCnt" resultType="deptCnt">
    SELECT DEPT_IDX, COUNT(DEPT_IDX) AS DEPT_CNT
    FROM EMPLOYEE_TB
    GROUP BY DEPT_IDX
  </select>

  <!-- <select id="ableList" resultType="ableList">
     /*소속, 부서, 경력(실, 가 ), 기사여부, !!노출 여부!! &#45;&#45;HAVING LAST_PRJ &lt; CURDATE() */
     SELECT MAX(PMT.OUT_DT) AS LAST_PRJ,
            ET.EMP_NM,
            CT.COMP_NM,
            DT.DEPT_NM,
            ET.ADR_1 as area,
            ET.GISA_YN,
            TRUNCATE(TIMESTAMPDIFF(MONTH, ET.CNT_DT, CURDATE()) / 12, 0)     AS workYF,
            TRUNCATE(MOD(TIMESTAMPDIFF(MONTH, ET.CNT_DT, CURDATE()), 12), 0) AS workMF,
            ET.OPEN_YN
     FROM EMPLOYEE_TB ET
            LEFT JOIN PROJECT_MEMBER_TB PMT ON ET.EMP_IDX = PMT.EMP_IDX
            LEFT JOIN COMPANY_TB CT ON ET.COMP_IDX = CT.COMP_IDX
            LEFT JOIN DEPARTMENT_TB DT ON ET.DEPT_IDX = DT.DEPT_IDX
     GROUP BY ET.EMP_NM
   </select>-->

  <select id="retireList" resultType="retireList">
    /*이름, 소속, 전공명(몇년제, 경력(입사일),퇴사일 */
    SELECT ET.EMP_NM,
           CT.COMP_NM,
           EBT.e_edu_bck_gubun                                                AS FINAL_EDU,
           EBT.E_EDU_BCK_MAJOR                                                AS MAJOR,
           ET.OUT_DT,
           TRUNCATE(TIMESTAMPDIFF(MONTH, ET.CNT_DT, CURDATE()) / 12, 0)     AS WORK_Y,
           TRUNCATE(MOD(TIMESTAMPDIFF(MONTH, ET.CNT_DT, CURDATE()), 12), 0) AS WORK_M
    FROM EMPLOYEE_TB ET
           LEFT JOIN COMPANY_TB CT ON ET.COMP_IDX = CT.COMP_IDX
           LEFT JOIN employee_education_background_tb EBT ON EBT.EMP_IDX = ET.EMP_IDX
    WHERE ET.WRK_YN = 'N'
      AND ET.OUT_DT IS NOT NULL
  </select>

  <select id="visitList" resultType="visitList">
    /*이름, 소속, 정규직 계약일 , 투입일자, 프로젝트명, 최근방문일자, 차일수*/
    SELECT ET.EMP_IDX                     AS EMP_IDX,
           ET.EMP_NM                      AS EMP_NM,
           ET.CNT_DT                      AS CNT_DT,
           CT.COMP_NM                     AS COMP_NM,
           PMT.INP_DT                     AS INP_DT,
           PT.PRJ_NM                      AS PRJ_NM,
           VT.VST_DT                      AS VST_DT,
           DATEDIFF(CURDATE(), VT.VST_DT) AS WAT_DT
    FROM EMPLOYEE_TB ET
           LEFT JOIN perform_project_tb PMT ON ET.EMP_IDX = PMT.EMP_IDX
           LEFT JOIN PROJECT_TB PT ON PMT.PRJ_IDX = PT.PRJ_IDX
           JOIN COMPANY_TB CT ON ET.COMP_IDX = CT.COMP_IDX
           JOIN employee_visit_tb VT ON ET.EMP_IDX = VT.EMP_IDX
  </select>

  <insert id="insertVisit" parameterType="Visit">
    INSERT INTO employee_visit_tb (
    <trim prefixOverrides=",">
      <if test="empIdx       !=null and empIdx        !=''">EMP_IDX</if>
      <if test="vstDt        !=null">,VST_DT</if>
      <if test="regDt        !=null">,REG_DT</if>
    </trim>
    ) VALUES (
    <trim prefixOverrides=",">
      <if test="empIdx       !=null and empIdx     !=''">#{empIdx}</if>
      <if test="vstDt        !=null">,#{vstDt}</if>
      <if test="regDt        !=null">,#{regDt}</if>
    </trim>
    )
  </insert>

  <insert id="joinEmp" parameterType="Employee">
    INSERT INTO EMPLOYEE_TB (DEPT_IDX, COMP_IDX, PSTN_IDX, EMP_NM, EMP_ID, EMP_PW, SALT, JUMIN_1, JUMIN_2, ZIP_CD, ADR_1, ADR_2, phone, EMAIL, ENT_DT, MS_YN, EXM_RSN, MEMO, GISA_YN, REG_DT
                           )
    VALUES (#{deptIdx}, #{compIdx}, #{pstnIdx}, #{empNm}, #{empId}, #{empPw}, #{salt}, #{jumin1}, #{jumin2}, #{zipCd}, #{adr1}, #{adr2}, #{phone}, #{email}, #{entDt}, #{msYn}, #{exmRsn}, #{memo},
            #{gisaYn}, #{regDt})
  </insert>

  <update id="update" parameterType="Employee">
    UPDATE EMPLOYEE_TB
    <trim prefix="SET" prefixOverrides=",">
      <if test="empPw       !=null and empPw      !=''">emp_pw= #{empPw}</if>
      <if test="imgPt       !=null and imgPt      !=''">, img_pt= #{imgPt}</if>
      <if test="oriImgNm    !=null and oriImgNm   !=''">, ori_img_nm= #{oriImgNm}</if>
      <if test="zipCd       !=null and zipCd      !=''">, zip_cd= #{zipCd}</if>
      <if test="adr1        !=null and adr1       !=''">, adr_1= #{adr1}</if>
      <if test="adr2        !=null and adr2       !=''">, adr_2= #{adr2}</if>
      <if test="ph          !=null and ph         !=''">, ph= #{ph}</if>
      <if test="email       !=null and email      !=''">, email= #{email}</if>
      <if test="entDt       !=null">, ent_dt= #{entDt}</if>
      <if test="cntDt       !=null">, cnt_dt= #{cntDt}</if>
      <if test="outDt       !=null">, out_dt= #{outDt}</if>
      <if test="cntYn       !=null and cntYn      !=''">, cnt_yn= #{cntYn}</if>
      <if test="wrkYn       !=null and wrkYn      !=''">, wrk_yn= #{wrkYn}</if>
      <if test="msYn        !=null and msYn       !=''">, ms_yn= #{msYn}</if>
      <if test="exmRsn      !=null and exmRsn     !=''">, exm_rsn= #{exmRsn}</if>
      <if test="memo        !=null and memo       !=''">, memo= #{memo}</if>
      <if test="gisaYn      !=null and fileIdx    !=''">, reg_dt= #{regDt}</if>
      <if test="filePt1     !=null and filePt1    !=''">, file_pt_1= #{filePt1}</if>
      <if test="fileNm1     !=null and fileNm1    !=''">, file_nm_1= #{fileNm1}</if>
      <if test="filePt2     !=null and filePt2    !=''">, file_pt_2= #{filePt2}</if>
      <if test="fileNm2     !=null and fileNm2    !=''">, file_nm_2= #{fileNm2}</if>
      <if test="filePt3     !=null and filePt3    !=''">, file_pt_3= #{filePt3}</if>
      <if test="fileNm3     !=null and fileNm3    !=''">, file_nm_3= #{fileNm3}</if>
      <if test="filePt4     !=null and filePt4    !=''">, file_pt_4= #{filePt4}</if>
      <if test="fileNm4     !=null and fileNm4    !=''">, file_nm_4= #{fileNm4}</if>
      <if test="filePt5     !=null and filePt5    !=''">, file_pt_5= #{filePt5}</if>
      <if test="fileNm5     !=null and fileNm5    !=''">, file_nm_5= #{fileNm5}</if>
    </trim>
    WHERE emp_idx = #{empIdx}
  </update>

  <select id="empInputList" resultType="EmpInputList">
    /*직원인덱스, 이름 , 프로젝트명, 프로젝트 기간, 거래처명*/
    SELECT ET.EMP_IDX, ET.EMP_NM, PT.PRJ_NM, MAX(PMT.INP_DT) AS INP_DT, PMT.OUT_DT, CT.CUST_NM
    FROM EMPLOYEE_TB ET
           LEFT JOIN perform_project_tb PMT ON ET.EMP_IDX = PMT.EMP_IDX
           LEFT JOIN PROJECT_TB PT ON PMT.PRJ_IDX = PT.PRJ_IDX
           LEFT JOIN CUSTOMER_TB CT ON PT.CUST_IDX = CT.CUST_IDX
    WHERE PMT.pmp_idx IS NOT NULL
    GROUP BY ET.EMP_IDX
    ORDER BY ET.EMP_IDX DESC
  </select>

  <select id="histList" parameterType="int" resultType="EmpInputHistory">
    SELECT CT.COMP_NM
         , PT.PRJ_NM
         , CST.CUST_NM
         , PMT.INP_DT
         , PMT.OUT_DT
         , SUM(PPT.SALES_PRICE) AS TOTAL_SALES
         , SUM(PPT.PRCHS_PRICE) AS TOTAL_PRCHS
         , CASE
             WHEN PMT.OUT_DT > CURDATE()
               THEN 1
             WHEN PMT.OUT_DT &lt; CURDATE()
               THEN 2
             WHEN PMT.OUT_DT = CURDATE()
               THEN 3
      END                       AS STATUS
    FROM perform_project_tb PMT
           LEFT JOIN PROJECT_TB PT ON PT.PRJ_IDX = PMT.PRJ_IDX
           LEFT JOIN COMPANY_TB CT ON CT.COMP_IDX = PMT.pmp_idx
           LEFT JOIN CUSTOMER_TB CST ON CST.CUST_IDX = PT.CUST_IDX
           LEFT JOIN PROJECT_PRICE_TB PPT ON PPT.PRJ_IDX = PMT.PRJ_IDX
    WHERE PMT.EMP_IDX = #{empIdx}
    GROUP BY PMT.PMP_IDX
  </select>
  <select id="dashboard" resultType="hashmap" parameterType="hashmap">
        <![CDATA[
    SELECT *
    FROM employee_tb
      /*ORDER BY NUM DESC*/
    LIMIT #{pageStart}, #{perPageNum}
    ]]>
    </select>
  <select id="boardListCnt" resultType="int">
    SELECT count(*)
    FROM employee_tb
  </select>


    <!--가용인력-->
    <select id="selectDashBoardList" resultType="ableList">
        SELECT
            ET.emp_idx,
            ER.exr_idx,
            ET.EMP_NM,
            ET.ADR_1                                                         AS area,
            TRUNCATE(TIMESTAMPDIFF(MONTH, ET.CNT_DT, CURDATE()) / 12, 0)     AS workYF,
            TRUNCATE(MOD(TIMESTAMPDIFF(MONTH, ET.CNT_DT, CURDATE()), 12), 0) AS workMF,
            ET.OPEN_YN,
            ER.SKILL,
            MAX(ER.OUT_DT) 													 AS intrvDt,
            MAX(ER.OUT_DT)												     AS ableDt /*추후수정*/
        FROM EMPLOYEE_TB ET , external_resume ER
        WHERE ET.EMP_IDX = ER.EMP_IDX
          AND ET.OPEN_YN = 'Y'
          AND ER.OUT_DT IS NOT NULL
        GROUP BY ET.EMP_NM

    </select>

    <sql id="search">
        <choose>
            <when test="type == 'name'">
                WHERE EMP_NM LIKE CONCAT('%',#{keyword},'%')
            </when>
            <when test="type == 'number'">
                WHERE EMP_NM LIKE CONCAT('%',#{keyword},'%')
            </when>
            <when test="type == 'hphone'">
                WHERE EMP_NM LIKE CONCAT('%',#{keyword},'%')
            </when>
            <when test="type == 'email'">
                WHERE EMP_NM LIKE CONCAT('%',#{keyword},'%')
            </when>
            <when test="type == 'all'">
                WHERE EMP_NM LIKE CONCAT('%',#{keyword},'%') /*컬럼수정필요*/
                OR EMP_NM LIKE CONCAT('%',#{keyword},'%') /*임시*/
                OR EMP_NM LIKE CONCAT('%',#{keyword},'%')
                OR EMP_NM LIKE CONCAT('%',#{keyword},'%')
            </when>
        </choose>
    </sql>


</mapper>